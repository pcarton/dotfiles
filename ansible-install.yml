---
- name: Install Dependencies
  hosts: localhost
  become: false
  vars:
    the_user: "{{ ansible_user_id }}"
    osx_homebrew_packages:
      - act
      - derailed/popeye/popeye
      - font-hack-nerd-font
      - gh
      - graphviz
      - helix
      - helm
      - hugo
      - k9s
      - kubectl
      - kubectx
      - kustomize
      - llvm
      - mc
      - node
      - npm
      - pipx
      - pyenv
      - slides
      - terraform-ls
      - tfenv
      - yq
    debian_apt_repositories:
      - ppa:maveonair/helix-editor
      - 'deb [trusted=yes] http://ftp.de.debian.org/debian buster main'
    debian_apt_packages:
      # - act # TODO
      - build-essential
      - cmake
      # - derailed/popeye/popeye # TODO
      # - font-hack-nerd-font # TODO
      - gh
      - graphviz
      - helix
      # - helm # TODO
      - hugo 
      # - k9s # TODO
      # - kubectl # TODO
      - kubectx # TODO
      # - kustomize # TODO
      - libasound2-dev
      - libssl-dev
      - llvm
      - mc
      - nodejs
      - npm
      - pkg-config
      - python3-dev
      - python3-pip
      - python3-venv
      - python3-virtualenv
      # - pyenv # TODO
      # - slides # TODO
      # - terraform-ls # TODO
      # - tfenv # TODO
      # - yq # TODO
    cargo_packages:
      - bacon
      - bat
      - bottom
      - cargo-info
      - csvlens
      - du-dust
      - eza
      - fd-find
      - git-delta
      - gitui
      - hwatch
      - irust
      - mprocs
      - nu
      - porsmo
      - procs
      - ripgrep
      - rtx-cli
      - speedtest-rs
      - starship
      - wiki-tui
      - zellij
      - zoxide
    npm_packages:
      - vscode-langservers-extracted
      - '@ansible/ansible-language-server'
      - bash-language-server
      - yaml-language-server
    pip_packages:
      - frogmouth
      - termsaver
    common_config_dirs:
      - "{{ ansible_env.HOME }}/.config/helix"
      - "{{ ansible_env.HOME }}/.config/mc"
      - "{{ ansible_env.HOME }}/.nu_scripts"
      - "{{ ansible_env.HOME }}/.config/alacritty"
      - "{{ ansible_env.HOME }}/.config/zellij"
      - "{{ ansible_env.HOME }}/.bash_scripts"
      - "{{ ansible_env.HOME }}/git-delta"
    common_dotfiles:
      - src: "{{ playbook_dir }}/starship.toml"
        dest: "{{ ansible_env.HOME }}/.config/starship.toml"
      - src: "{{ playbook_dir }}/.gitconfig"
        dest: "{{ ansible_env.HOME }}/.gitconfig"
      - src: "{{ playbook_dir }}/git-delta/themes.gitconfig"
        dest: "{{ ansible_env.HOME }}/git-delta/themes.gitconfig"
      - src: "{{ playbook_dir }}/act-config.actrc"
        dest: "{{ ansible_env.HOME }}/.actrc"
      - src: "{{ playbook_dir }}/nu_scripts/git-completions.nu"
        dest: "{{ ansible_env.HOME }}/.nu_scripts/git-completions.nu"
      - src: "{{ playbook_dir }}/bash_scripts/pull-in-depependabot.sh"
        dest: "{{ ansible_env.HOME }}/.bash_scripts/pull-in-depependabot.sh"
      - src: "{{ playbook_dir }}/alacritty.toml"
        dest: "{{ ansible_env.HOME }}/.config/alacritty/alacritty.toml"
      - src: "{{ playbook_dir }}/aliases.sh"
        dest: "{{ ansible_env.HOME }}/aliases.sh"
      - src: "{{ playbook_dir }}/helix-config.toml"
        dest: "{{ ansible_env.HOME }}/.config/helix/config.toml"
      - src: "{{ playbook_dir }}/helix-languages.toml"
        dest: "{{ ansible_env.HOME }}/.config/helix/languages.toml"
      - src: "{{ playbook_dir }}/midnight-commander.ini"
        dest: "{{ ansible_env.HOME }}/.config/mc/ini"
      - src: "{{ playbook_dir }}/zellij-config.kdl"
        dest: "{{ ansible_env.HOME }}/.config/zellij/config.kdl"
      - src: "{{ playbook_dir }}/zellij-layouts"
        dest: "{{ ansible_env.HOME }}/.config/zellij/layouts"
    osx_config_dirs:
      - "/Users/{{ ansible_user_id }}/Library/Application Support/nushell"
    osx_dotfiles:
      - src: "{{ playbook_dir }}/env.nu"
        dest: "/Users/{{ ansible_user_id }}/Library/Application Support/nushell/env.nu"
      - src: "{{ playbook_dir }}/config.nu"
        dest: "/Users/{{ ansible_user_id }}/Library/Application Support/nushell/config.nu"
    debian_config_dirs:
      - "{{ ansible_env.HOME }}/.config/nushell"
    debian_dotfiles:
      - src: "{{ playbook_dir }}/env.nu"
        dest: "{{ ansible_env.HOME }}/.config/nushell/env.nu"
      - src: "{{ playbook_dir }}/config.nu"
        dest: "{{ ansible_env.HOME }}/.config/nushell/config.nu"

  tasks:
    - name: Install with OSX Homebrew
      become: false
      community.general.homebrew:
        name: "{{ item }}"
        state: latest
        update_homebrew: true
      register: result
      until: result is successful
      loop: "{{ osx_homebrew_packages }}"
      when: ansible_os_family == "Darwin"
      tags:
        - install

    - name: Upgrade all with OSX Homebrew
      become: false
      community.general.homebrew:
        update_homebrew: true
        upgrade_all: true
      register: result
      until: result is successful
      when: ansible_os_family == "Darwin"
      tags:
        - upgrade

    - name: Add APT Repositories
      become: true
      ansible.builtin.apt_repository:
        repo: "{{ item }}"
        state: present
      register: result
      until: result is successful
      loop: "{{ debian_apt_repositories }}"
      when: ansible_os_family == "Debian"
      tags:
        - install

    - name: Install with Debian APT
      become: true
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      register: result
      until: result is successful
      loop: "{{ debian_apt_packages }}"
      when: ansible_os_family == "Debian"
      tags:
        - install

    - name: Upgrade all with Debian APT
      become: true
      ansible.builtin.apt:
        upgrade: yes
      register: result
      until: result is successful
      when: ansible_os_family == "Debian"
      tags:
        - install

    - name: Check if gcloud is installed
      shell: command -v gcloud
      register: gcloud_exists
      ignore_errors: true
      tags:
        - upgrade
        - gcloud

    - name: Upgrade gcloud components
      when: not gcloud_exists is failed
      shell: gcloud components update --quiet
      tags:
        - upgrade
        - gcloud

    - name: Check if cargo is installed
      shell: command -v cargo
      register: cargo_exists
      ignore_errors: true
      tags:
        - install
        - upgrade
        - rust

    - name: Download cargo installer
      when: cargo_exists is failed
      get_url:
        url: https://sh.rustup.rs
        dest: /tmp/sh.rustup.rs
        mode: '0755'
        force: 'yes'
      tags:
        - install
        - rust

    - name: Install rust/cargo
      when: cargo_exists is failed
      shell: /tmp/sh.rustup.rs -y
      tags:
        - install
        - rust

    - name: Update rust/cargo
      when: not cargo_exists is failed
      shell: rustup update
      tags:
        - upgrade
        - rust

    - name: Install sccache
      community.general.cargo:
        name: "sccache"
        path: "{{ ansible_env.HOME }}/.cargo"
        state: latest
      register: result
      until: result is successful
      tags:
        - install
        - upgrade
        - rust

    - name: Install with cargo
      community.general.cargo:
        name: "{{ item }}"
        path: "{{ ansible_env.HOME }}/.cargo"
        state: latest
      register: result
      until: result is successful
      environment:
        RUSTC_WRAPPER: "{{ ansible_env.HOME }}/.cargo/bin/sccache"
      loop: "{{ cargo_packages }}"
      tags:
        - install
        - upgrade
        - rust

    - name: Install pipx
      ansible.builtin.pip:
        name: pipx
        state: latest
      register: result
      until: result is successful
      tags:
        - install
        - upgrade
        - python

    - name: Install with pipx
      community.general.pipx:
        name: "{{ item }}"
        state: latest
        # executable: /opt/homebrew/bin/pipx
      register: result
      until: result is successful
      loop: "{{ pip_packages }}"
      tags:
        - install
        - upgrade
        - python

    - name: Install with npm on MacOS
      community.general.npm:
        name: "{{ item }}"
        state: latest
        # executable: /opt/homebrew/bin/npm
        global: true
      register: result
      until: result is successful
      loop: "{{ npm_packages }}"
      when: ansible_os_family == "Darwin"
      tags:
        - install
        - upgrade
        - node

    - name: Install with npm on Debian
      become: true
      community.general.npm:
        name: "{{ item }}"
        state: latest
        # executable: /opt/homebrew/bin/npm
        global: true
      register: result
      until: result is successful
      loop: "{{ npm_packages }}"
      when: ansible_os_family == "Debian"
      tags:
        - install
        - upgrade
        - node

    - name: Change user shell to nu
      become: true
      user:
        name: "{{ the_user }}"
        shell: "{{ ansible_env.HOME }}/.cargo/bin/nu"
      tags:
        - config

    - name: Create common config directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      loop: "{{ common_config_dirs }}"
      tags:
        - dotfiles
        - config

    - name: Create symbolic links to the common dotfiles
      ansible.builtin.file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: link
      loop: "{{ common_dotfiles }}"
      tags:
        - dotfiles
        - config

    - name: Create MacOS config directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      loop: "{{ osx_config_dirs }}"
      when: ansible_os_family == "Darwin"
      tags:
        - dotfiles
        - config

    - name: Create symbolic links to the MacOS dotfiles
      ansible.builtin.file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: link
      loop: "{{ osx_dotfiles }}"
      when: ansible_os_family == "Darwin"
      tags:
        - dotfiles
        - config

    - name: Create Debian config directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      loop: "{{ debian_config_dirs }}"
      when: ansible_os_family == "Debian"
      tags:
        - dotfiles
        - config

    - name: Create symbolic links to the Debian dotfiles
      ansible.builtin.file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: link
      loop: "{{ debian_dotfiles }}"
      when: ansible_os_family == "Debian"
      tags:
        - dotfiles
        - config
