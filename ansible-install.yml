---
- name: Install Dependencies
  hosts: localhost
  become: false
  vars:
    the_user: "{{ ansible_user_id }}"
    manager_packages:
      - act
      - cmake
      - derailed/popeye/popeye
      - gh
      - graphviz
      - helix  # TODO Needs extra setup in ubuntu - https://docs.helix-editor.com/install.html
      - helm
      - hugo
      - k9s
      - kubectl
      - kubectx
      - kustomize
      - llvm
      - mc
      - pipx
      - pyenv
      - slides
      - tfenv
      - yq
    cargo_packages:
      - bacon
      - bat
      - bottom
      - cargo-info
      - csvlens
      - du-dust
      - eza
      - fd-find
      - fnm
      - gitui
      - irust
      - mprocs
      - nu
      - porsmo
      - ripgrep
      - rtx-cli
      - speedtest-rs
      - starship
      - wiki-tui
      - zellij
      - zoxide
    pip_packages:
      - frogmouth
      - termsaver
    config_dirs:
      - "/Users/{{ ansible_user_id }}/Library/Application Support/nushell"
      - "{{ ansible_env.HOME }}/.config/helix"
      - "{{ ansible_env.HOME }}/.nu_scripts"
      - "{{ ansible_env.HOME }}/.config/alacritty"
      - "{{ ansible_env.HOME }}/.config/zellij"
      - "{{ ansible_env.HOME }}/.bash_scripts"
    dotfiles:
      - src: "{{ playbook_dir }}/starship.toml"
        dest: "{{ ansible_env.HOME }}/.config/starship.toml"
      - src: "{{ playbook_dir }}/act-config.actrc"
        dest: "{{ ansible_env.HOME }}/.actrc"
      - src: "{{ playbook_dir }}/env.nu"
        dest: "/Users/{{ ansible_user_id }}/Library/Application Support/nushell/env.nu"
      - src: "{{ playbook_dir }}/config.nu"
        dest: "/Users/{{ ansible_user_id }}/Library/Application Support/nushell/config.nu"
      - src: "{{ playbook_dir }}/nu_scripts/git-completions.nu"
        dest: "{{ ansible_env.HOME }}/.nu_scripts/git-completions.nu"
      - src: "{{ playbook_dir }}/bash_scripts/pull-in-depependabot.sh"
        dest: "{{ ansible_env.HOME }}/.bash_scripts/pull-in-depependabot.sh"
      - src: "{{ playbook_dir }}/alacritty.toml"
        dest: "{{ ansible_env.HOME }}/.config/alacritty/alacritty.toml"
      - src: "{{ playbook_dir }}/aliases.sh"
        dest: "{{ ansible_env.HOME }}/aliases.sh"
      - src: "{{ playbook_dir }}/helix-config.toml"
        dest: "{{ ansible_env.HOME }}/.config/helix/config.toml"
      - src: "{{ playbook_dir }}/helix-languages.toml"
        dest: "{{ ansible_env.HOME }}/.config/helix/languages.toml"
      - src: "{{ playbook_dir }}/zellij-config.kdl"
        dest: "{{ ansible_env.HOME }}/.config/zellij/config.kdl"
      - src: "{{ playbook_dir }}/zellij-layouts"
        dest: "{{ ansible_env.HOME }}/.config/zellij/layouts"

  tasks:
    - name: Install with package manager
      become: no
      community.general.homebrew:
        name: "{{ item }}"
        state: latest
        update_homebrew: true
      register: result
      until: result is successful
      loop: "{{ manager_packages }}"
      tags:
        - install

    - name: Upgrade all with package manager
      become: no
      community.general.homebrew:
        update_homebrew: true
        upgrade_all: true
      register: result
      until: result is successful
      tags:
        - upgrade

    - name: Check if gcloud is installed
      shell: command -v gcloud
      register: gcloud_exists
      ignore_errors: yes
      tags:
        - upgrade
        - gcloud

    - name: Upgrade gcloud components
      when: not gcloud_exists is failed
      shell: gcloud components update --quiet
      tags:
        - upgrade
        - gcloud

    - name: Check if cargo is installed
      shell: command -v cargo
      register: cargo_exists
      ignore_errors: yes
      tags:
        - install
        - upgrade
        - rust

    - name: Download cargo installer
      when: cargo_exists is failed
      get_url:
        url: https://sh.rustup.rs
        dest: /tmp/sh.rustup.rs
        mode: '0755'
        force: 'yes'
      tags:
        - install
        - rust

    - name: Install rust/cargo
      when: cargo_exists is failed
      shell: /tmp/sh.rustup.rs -y
      tags:
        - install
        - rust

    - name: Update rust/cargo
      when: not cargo_exists is failed
      shell: rustup update
      tags:
        - upgrade
        - rust

    - name: Install sccache
      community.general.cargo:
        name: "sccache"
        path: "{{ ansible_env.HOME }}/.cargo"
        state: latest
      register: result
      until: result is successful
      tags:
        - install
        - upgrade
        - rust

    - name: Install with cargo
      community.general.cargo:
        name: "{{ item }}"
        path: "{{ ansible_env.HOME }}/.cargo"
        state: latest
      register: result
      until: result is successful
      environment:
        RUSTC_WRAPPER: "{{ ansible_env.HOME }}/.cargo/bin/sccache"
      loop: "{{ cargo_packages }}"
      tags:
        - install
        - upgrade
        - rust

    - name: Install with pipx
      community.general.pipx:
        name: "{{ item }}"
        state: latest
        executable: /opt/homebrew/bin/pipx
      register: result
      until: result is successful
      loop: "{{ pip_packages }}"
      tags:
        - install
        - upgrade
        - python

    - name: Change user shell to nu
      become: yes
      user: 
        name: "{{ the_user }}"
        shell: "{{ ansible_env.HOME }}/.cargo/bin/nu"
      tags:
        - config

    - name: Create config directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      loop: "{{ config_dirs }}"
      tags:
        - dotfiles
        - config

    - name: Create symbolic links to the dotfiles
      ansible.builtin.file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: link
      loop: "{{ dotfiles }}"
      tags:
        - dotfiles
        - config
